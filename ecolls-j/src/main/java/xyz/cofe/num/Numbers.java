/*
 * The MIT License
 *
 * Copyright 2018 user.
 *
 * Данная лицензия разрешает, безвозмездно, лицам, получившим копию данного программного
 * обеспечения и сопутствующей документации (в дальнейшем именуемыми "Программное Обеспечение"), 
 * использовать Программное Обеспечение без ограничений, включая неограниченное право на 
 * использование, копирование, изменение, объединение, публикацию, распространение, сублицензирование 
 * и/или продажу копий Программного Обеспечения, также как и лицам, которым предоставляется 
 * данное Программное Обеспечение, при соблюдении следующих условий:
 *
 * Вышеупомянутый копирайт и данные условия должны быть включены во все копии 
 * или значимые части данного Программного Обеспечения.
 *
 * ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ ЛЮБОГО ВИДА ГАРАНТИЙ, 
 * ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, 
 * СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И НЕНАРУШЕНИЯ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ 
 * ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ 
 * ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ 
 * ПРИЧИНОЙ ИЛИ СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
 * ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.
 */

package xyz.cofe.num;

/**
 * Работа с числами
 * @author Kamnev Georgiy
 * @param <N> Тип чисел
 */
public interface Numbers<N> {
    /**
     * Возвращает нулевое число
     * @return ноль
     */
    N zero();
    
    /**
     * Возвращает единицу
     * @return единица
     */
    N one();
    
    /**
     * Проверяет что число является нулем
     * @param n число
     * @return true - число является нулем
     */
    boolean zero(N n);
    
    /**
     * Проверяет что число не определенно 
     * @param n число
     * @return true - число не определенно 
     */
    boolean undefined(N n);
    
    /**
     * Проверяет что число является бесконечностью
     * @param n число
     * @return true - число является бесконечностью
     */
    boolean infinity(N n);
    
    /**
     * Сложение чисел
     * @param a число а
     * @param b число б
     * @return сумма чисел
     */
    N add( N a, N b );
    
    /**
     * Вычитание чисел
     * @param a число а
     * @param b число б
     * @return разность чисел
     */
    N sub( N a, N b );
    
    /**
     * Умножение чисел
     * @param a число а
     * @param b число б
     * @return результат умножение
     */
    N mul( N a, N b );
    
    /**
     * Деление чисел
     * @param a число а
     * @param b число б
     * @return результат деления
     */
    N div( N a, N b );
    
    /**
     * Остаток от деления
     * @param a число а
     * @param b число б
     * @return остаток
     */
    N remainder( N a, N b );

    /**
     * Сравнивает два числа на равность
     * @param a число а
     * @param b число б
     * @return true - числа равны
     */
    boolean equals( N a, N b );
    
    /**
     * Сравннвает числа
     * @param a число а
     * @param b число б
     * @return true - число а больше б
     */
    boolean more( N a, N b );
    
    /**
     * Сравннвает числа
     * @param a число а
     * @param b число б
     * @return true - число а меньше б
     */
    boolean less( N a, N b );
    
    /**
     * Возвращает следующее число
     * @param n число
     * @return следующее число
     */
    N next( N n );
    
    /**
     * Возвращает предыдущее число
     * @param n число
     * @return предыдущее число
     */
    N prev( N n );
}
